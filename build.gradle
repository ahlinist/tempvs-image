buildscript {
	ext {
		springBootVersion = '2.2.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework.cloud:spring-cloud-contract-gradle-plugin:2.0.1.RELEASE")
	}
}


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'club.tempvs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
	set('springCloudVersion', 'Hoxton.RC1')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime

	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	//apache commons
	implementation 'commons-io:commons-io:2.6'
	//lombok
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	//testing
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
	testImplementation "org.spockframework:spock-core:1.3-groovy-2.5"
	testImplementation "org.spockframework:spock-spring:1.3-groovy-2.5"
}

bootJar {
	archiveBaseName = 'tempvs-image'
	archiveVersion = ''
}

sourceSets {
	integrationTest {
		groovy {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/groovy')
		}

		resources.srcDir file('src/integration-test/resources')
	}
}

task integrationTest(type: Test) {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}
